{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/BurgerBuilder/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/BurgerBuilder/Checkout/ContactData/ContactData.js","containers/BurgerBuilder/Checkout/Checkout.js"],"names":["input","props","inputEl","inputClasses","classes","InputEl","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","CheckoutSummary","style","width","textAlign","margin","Burger","ingredients","Button","btnType","clicked","cancelledCheckout","continuedCheckout","disabled","ContactData","state","isValidForm","orderForm","name","type","placeholder","validation","required","valid","email","isEmail","street","city","country","zipCode","minLength","maxLength","isNumeric","comments","deliveryMode","orderHandler","event","preventDefault","formData","formElId","orderInfo","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputId","updatedFormEl","utils","target","updatedOrderForm","formIsValid","inputIdentifier","setState","formElArray","this","id","config","inputElBoxes","formEl","form","onSubmit","Component","connect","burgerBuilder","totalPrice","loading","order","auth","dispatch","actions","withErrorHandler","axios","Checkout","cancelledCheckoutHandler","history","goBack","continuedCheckoutHandler","replace","match","url","summary","to","purchasedRedirect","purchased","path","component"],"mappings":"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","file":"static/js/3.2cd5116a.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputEl = null;\r\n    let inputClasses = [classes.InputEl];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch(props.elementType) {\r\n        case('input'):\r\n            inputEl = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n        break;\r\n        case('textarea'): \r\n        inputEl = <textarea className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n        break;\r\n        case('select'): \r\n        inputEl = <select className={inputClasses} value={props.value} onChange={props.changed}>\r\n            {props.elementConfig.options.map(option => (\r\n                <option value={option.value} key={option.value}>{option.displayValue}</option> \r\n            ))}\r\n      </select>;\r\n    break;\r\n        default:\r\n        inputEl = <input className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n    };\r\n    return (\r\n    <div className={classes.Input}>\r\n        <label className={classes.Label}>{props.label}</label>\r\n        {inputEl}       \r\n    </div>\r\n);\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3F4Cp\",\"Label\":\"Input_Label__2zlOW\",\"InputEl\":\"Input_InputEl__3NeKz\",\"Invalid\":\"Input_Invalid__3RpkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__14T01\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3GS-6\"};","import React from \"react\";\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => (\r\n  <div className={classes.CheckoutSummary}>\r\n      <h1>Checkout</h1>\r\n      <h4>Preview of Your Burger:</h4>\r\n      <div style={{width: '100%', textAlign: 'center', margin: 'auto'}}>\r\n          <Burger ingredients={props.ingredients} />\r\n        </div>  \r\n        <Button btnType=\"Danger\" clicked={props.cancelledCheckout}>CANCEL</Button>\r\n        <Button btnType=\"Success\" clicked={props.continuedCheckout} disabled={props.disabled}>CONTINUE</Button>\r\n        </div>  \r\n);\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport classes from './ContactData.module.css';\r\nimport Button from '../../../../components/UI/Button/Button';\r\nimport axios from '../../../../axios-orders';\r\nimport Input from '../../../../components/UI/Input/Input';\r\nimport { connect } from 'react-redux';\r\nimport withErrorHandler from '../../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../../store/actions/main';\r\nimport * as utils from '../../../../shared/utils/allUtils';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        isValidForm: false,\r\n        orderForm: {\r\n        name: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Your Name'\r\n            }, \r\n            value: '', \r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false \r\n        },\r\n        email: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: 'Your E-Mail'\r\n            }, \r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                isEmail: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        street: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Street'\r\n            }, \r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        city: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'City'\r\n            }, \r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        state: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'State'\r\n            }, \r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        country: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Country'\r\n            }, \r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        zipCode: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'number',\r\n                placeholder: 'ZIP/Postal CODE'\r\n            }, \r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 5,\r\n                maxLength: 6,\r\n                isNumeric: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        comments: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'text',\r\n                placeholder: 'Any Comments or Health Restrictions'\r\n            }, \r\n            value: '',\r\n            validation: {\r\n                required: false\r\n            }\r\n        }, \r\n        deliveryMode: {\r\n            elementType: 'select',\r\n            elementConfig: {\r\n                options: [\r\n                    {value: 'pickup', displayValue: 'Pickup at Store'},\r\n                    {value: 'homeDelivery', displayValue: 'Home Delivery'}\r\n                ]\r\n            }, \r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: true,\r\n            touched: false,\r\n            value: 'Pickup at Store'\r\n    } \r\n  }\r\n};\r\n\r\norderHandler = (event) => {\r\nevent.preventDefault();\r\nlet formData = {};\r\nfor(let formElId in this.state.orderForm) {\r\n    formData[formElId] = this.state.orderForm[formElId].value;\r\n};\r\nconst orderInfo = {\r\ningredients: this.props.ings,\r\nprice: this.props.price,\r\norderData: formData,\r\nuserId: this.props.userId\r\n};\r\n\r\nthis.props.onOrderBurger(orderInfo, this.props.token);\r\n\r\n};\r\n\r\ninputChangedHandler = (event, inputId) => {\r\n  const updatedFormEl = utils.updateObject(this.state.orderForm[inputId], {\r\n    value: event.target.value,\r\n    valid: utils.checkValidity(event.target.value, this.state.orderForm[inputId].validation),\r\n    touched: true\r\n  }); \r\n  \r\n  const updatedOrderForm = utils.updateObject(this.state.orderForm, {\r\n    [inputId]: updatedFormEl\r\n  }); \r\n\r\n   let formIsValid = true;\r\n   for(let inputIdentifier in updatedOrderForm) {\r\n        formIsValid = updatedOrderForm[inputIdentifier].valid;\r\n   }\r\n  this.setState({orderForm: updatedOrderForm, isValidForm: formIsValid}); \r\n};\r\n\r\nrender() {\r\n    let formElArray = [];\r\n    for(let key in this.state.orderForm) {\r\n           formElArray.push({\r\n               id: key, \r\n               config: this.state.orderForm[key]\r\n      }); \r\n    };\r\n    const inputElBoxes = formElArray.map(formEl => (\r\n<Input\r\nkey={formEl.id} \r\nelementType={formEl.config.elementType} \r\nelementConfig={formEl.config.elementConfig} \r\nvalue={formEl.config.value} \r\nchanged={(event) => this.inputChangedHandler(event, formEl.id)} \r\ninvalid={!formEl.config.valid}\r\nshouldValidate={formEl.config.validation}\r\ntouched={formEl.config.touched} \r\n/>\r\n));\r\n      let form = (\r\n        <form onSubmit={(event) => this.orderHandler(event)}>\r\n          {inputElBoxes}\r\n          <Button btnType=\"Success\" disabled={!this.state.isValidForm}>ORDER MY BURGER!</Button>\r\n        </form>\r\n       );\r\n      return (\r\n        <div className={classes.ContactData}>\r\n        <h4>Enter your Contact Data:</h4>\r\n        {form}\r\n        </div>\r\n    ); \r\n  };\r\n };\r\n\r\n \r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId \r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from \"react\";\r\nimport CheckoutSummary from '../../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport { connect } from 'react-redux';\r\n\r\nclass Checkout extends Component {\r\n\r\n    cancelledCheckoutHandler = () => {\r\n        this.props.history.goBack();\r\n    };\r\n\r\n    continuedCheckoutHandler = () => {\r\n        this.props.history.replace(this.props.match.url + '/contact-data');\r\n    };\r\n\r\n    render() {   \r\n        let summary = <Redirect to='/burger-builder' />;\r\n        if(this.props.ings) {\r\n            let purchasedRedirect = this.props.purchased ? <Redirect to=\"/thank-you\" />: null;\r\n            summary = (\r\n                <div>\r\n                 {purchasedRedirect}\r\n                <CheckoutSummary \r\n                ingredients={this.props.ings} \r\n                cancelledCheckout={this.cancelledCheckoutHandler} \r\n                continuedCheckout={this.continuedCheckoutHandler} />\r\n                <Route path={this.props.match.path + '/contact-data'} component={ContactData} />\r\n                </div>                \r\n            );\r\n        }\r\n\r\n        return summary;\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}