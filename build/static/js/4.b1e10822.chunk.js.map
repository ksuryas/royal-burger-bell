{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputEl","inputClasses","classes","InputEl","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","maxLength","isNumeric","inSignupMode","inputChangedHandler","event","controlName","updatedAuthForm","utils","target","setState","submitHandler","preventDefault","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElArray","id","config","inputElBoxes","formEl","form","onSubmit","btnType","errorMsg","error","style","color","message","authRedirect","isAuthenticated","to","clicked","Component","connect","burgerBuilder","building","auth","token","dispatch","actions","path"],"mappings":"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","file":"static/js/4.b1e10822.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let inputEl = null;\r\n    let inputClasses = [classes.InputEl];\r\n\r\n    if(props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch(props.elementType) {\r\n        case('input'):\r\n            inputEl = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n        break;\r\n        case('textarea'): \r\n        inputEl = <textarea className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n        break;\r\n        case('select'): \r\n        inputEl = <select className={inputClasses} value={props.value} onChange={props.changed}>\r\n            {props.elementConfig.options.map(option => (\r\n                <option value={option.value} key={option.value}>{option.displayValue}</option> \r\n            ))}\r\n      </select>;\r\n    break;\r\n        default:\r\n        inputEl = <input className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.changed} />;\r\n    };\r\n    return (\r\n    <div className={classes.Input}>\r\n        <label className={classes.Label}>{props.label}</label>\r\n        {inputEl}       \r\n    </div>\r\n);\r\n};\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3F4Cp\",\"Label\":\"Input_Label__2zlOW\",\"InputEl\":\"Input_InputEl__3NeKz\",\"Invalid\":\"Input_Invalid__3RpkF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2PWUk\"};","import React, { Component } from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/main';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport * as utils from '../../shared/utils/allUtils';\r\n\r\nclass Auth extends Component {\r\nstate = {\r\n    controls: {\r\n        email: {\r\n            elementType: 'input',\r\n            elementConfig: {\r\n                type: 'email',\r\n                placeholder: 'Mail Address'\r\n        }, \r\n        value: '', \r\n        validation: {\r\n            required: true,\r\n            isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false \r\n    },\r\n    password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n            type: 'password',\r\n            placeholder: 'Password'\r\n    }, \r\n    value: '', \r\n    validation: {\r\n        required: true,\r\n        maxLength: 6,\r\n        isNumeric: true\r\n    },\r\n    valid: false,\r\n    touched: false \r\n}\r\n},\r\ninSignupMode: true \r\n};\r\n\r\ncomponentDidMount() {\r\nif(!this.props.buildingBurger && this.props.authRedirectPath) {\r\n    this.props.onSetAuthRedirectPath('/burger-builder');\r\n}\r\n};\r\n\r\ninputChangedHandler = (event, controlName) => {\r\n    const updatedAuthForm = utils.updateObject(this.state.controls, {\r\n        [controlName]: utils.updateObject(this.state.controls[controlName], {\r\n            value: event.target.value, \r\n            valid: utils.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n            touched: true\r\n        })\r\n    }); \r\n      this.setState({controls: updatedAuthForm}); \r\n    };\r\n    \r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.inSignupMode);\r\n    };\r\n\r\nswitchAuthModeHandler = () => {\r\n  this.setState(prevState => {\r\n      return {\r\n          inSignupMode: !prevState.inSignupMode\r\n      };\r\n  }); \r\n};\r\n\r\nrender() {\r\n    let formElArray = [];\r\n    for(let key in this.state.controls) {\r\n           formElArray.push({\r\n               id: key, \r\n               config: this.state.controls[key]\r\n      }); \r\n    };\r\n    const inputElBoxes = formElArray.map(formEl => (\r\n        <Input\r\n        key={formEl.id} \r\n        elementType={formEl.config.elementType} \r\n        elementConfig={formEl.config.elementConfig} \r\n        value={formEl.config.value} \r\n        changed={(event) => this.inputChangedHandler(event, formEl.id)} \r\n        invalid={!formEl.config.valid}\r\n        shouldValidate={formEl.config.validation}\r\n        touched={formEl.config.touched} \r\n        />\r\n        ));\r\n        \r\n      let form = (\r\n        <form onSubmit={(event) => this.submitHandler(event)}> \r\n          <h4>{this.state.inSignupMode ? 'Signup' : 'Sign In'} Here:</h4>\r\n          {inputElBoxes} \r\n          <Button btnType=\"Success\">{this.state.inSignupMode ? 'Signup' : 'Sign In'}</Button>\r\n        </form>\r\n       );\r\n      \r\n       let errorMsg = null;\r\n       if(this.props.error) {\r\n            errorMsg = <p style={{color: 'red'}}>{this.props.error.message}</p>;\r\n       }\r\n\r\n       let authRedirect = null;\r\n       if(this.props.isAuthenticated) {\r\n           authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n           errorMsg = null;\r\n       }\r\n\r\n    return (\r\n        <div className={classes.Auth}>\r\n            {authRedirect}\r\n            {errorMsg}\r\n           {form}\r\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>Switch to {this.state.inSignupMode ? 'Sign In' : 'Signup'}</Button>\r\n        </div>\r\n    );\r\n}\r\n};\r\n\r\nconst mapStateToProps = state => {\r\nreturn {\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null\r\n};\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, inSignupMode) => dispatch(actions.auth(email, password, inSignupMode)),\r\n        onSetAuthRedirectPath: (path) => dispatch(actions.setAuthRedirectPath(path))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}